using Microsoft.VisualStudio.PlatformUI;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Text.Classification;
using Microsoft.VisualStudio.Text.Formatting;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Windows.Media;
using VSRAD.Syntax.Helpers;

namespace VSRAD.Syntax.SyntaxHighlighter
{
    [Export]
    internal class ThemeColorManager
    {
        private const string Module = "Theme color manager";

        private readonly IEditorFormatMapService _editorFormatMapService;
        private readonly IClassificationFormatMapService _classificationFormatMapService;
        private readonly IClassificationTypeRegistryService _classificationTypeRegistry;

        [ImportingConstructor]
        public ThemeColorManager(
            IEditorFormatMapService editorFormatMapService,
            IClassificationFormatMapService classificationFormatMapService,
            IClassificationTypeRegistryService classificationTypeRegistry)
        {
            _editorFormatMapService = editorFormatMapService;
            _classificationFormatMapService = classificationFormatMapService;
            _classificationTypeRegistry = classificationTypeRegistry;
        }

        public ThemeColor GetDefaultColors(string category) =>
            ThemeColors.Colors.TryGetValue(category, out var color)
                ? color
                : ThemeColors.EditorColors.TryGetValue(category, out color)
                    ? color
                    : ThemeColor.Default;

        public void UpdateColors()
        {
            var classificationFormatMap = _classificationFormatMapService.GetClassificationFormatMap(category: "text");
            var editorFormatMap = _editorFormatMapService.GetEditorFormatMap(category: "text");

            UpdateClassificationColors(classificationFormatMap);
            UpdateEditorColors(editorFormatMap);
        }

        private void UpdateClassificationColors(IClassificationFormatMap formatMap)
        {
            try
            {
                formatMap.BeginBatchUpdate();
                foreach (var pair in ThemeColors.Colors)
                {
                    var type = pair.Key;
                    var color = pair.Value;

                    var classificationType = _classificationTypeRegistry.GetClassificationType(type);
                    if (classificationType == null)
                    {
                        Error.LogError($"Cannot find classification type related to {type}", Module);
                        continue;
                    }
                    
                    var oldProp = formatMap.GetTextProperties(classificationType);

                    var foregroundBrush = color.Foreground == null
                        ? null
                        : new SolidColorBrush(color.Foreground.Value);

                    var backgroundBrush = color.Background == null
                            ? null
                            : new SolidColorBrush(color.Background.Value);

                    var newProp = TextFormattingRunProperties.CreateTextFormattingRunProperties(
                        foregroundBrush, backgroundBrush, oldProp.Typeface, null, null, oldProp.TextDecorations,
                        oldProp.TextEffects, oldProp.CultureInfo);

                    formatMap.SetTextProperties(classificationType, newProp);
                }
            }
            finally
            {
                formatMap.EndBatchUpdate();
            }
        }

        private void UpdateEditorColors(IEditorFormatMap formatMap)
        {
            try
            {
                formatMap.BeginBatchUpdate();
                foreach (var pair in ThemeColors.EditorColors)
                {
                    var type = pair.Key;
                    var color = pair.Value;

                    var property = formatMap.GetProperties(type);
                    if (property == null)
                    {
                        Error.LogError($"Cannot find editor format related to {type}", Module);
                        continue;
                    }

                    property.Remove("ForegroundColor");
                    property.Remove("BackgroundColor");
                    property.Add("ForegroundColor", color.Foreground);
                    property.Add("BackgroundColor", color.Background);

                    formatMap.SetProperties(type, property);
                }
            }
            finally
            {
                formatMap.EndBatchUpdate();
            }
        }
    }

    public static class ThemeColors
    {
        #region Autogenerated resource keys
        // These resource keys are generated by Visual Studio Extension Color Editor, and should be replaced when new colors are added to this category.
        public static readonly Guid Category = new Guid("128f43cc-214c-49f8-a08c-f379112caa51");

        private static ThemeResourceKey _RADbracematchingColorKey;
        private static ThemeResourceKey _RADbracematchingBrushKey;
        private static ThemeResourceKey _RADbracematchingTextColorKey;
        private static ThemeResourceKey _RADbracematchingTextBrushKey;
        public static ThemeResourceKey RADbracematchingColorKey { get { return _RADbracematchingColorKey ?? (_RADbracematchingColorKey = new ThemeResourceKey(Category, "RAD brace matching", ThemeResourceKeyType.BackgroundColor)); } }
        public static ThemeResourceKey RADbracematchingBrushKey { get { return _RADbracematchingBrushKey ?? (_RADbracematchingBrushKey = new ThemeResourceKey(Category, "RAD brace matching", ThemeResourceKeyType.BackgroundBrush)); } }
        public static ThemeResourceKey RADbracematchingTextColorKey { get { return _RADbracematchingTextColorKey ?? (_RADbracematchingTextColorKey = new ThemeResourceKey(Category, "RAD brace matching", ThemeResourceKeyType.ForegroundColor)); } }
        public static ThemeResourceKey RADbracematchingTextBrushKey { get { return _RADbracematchingTextBrushKey ?? (_RADbracematchingTextBrushKey = new ThemeResourceKey(Category, "RAD brace matching", ThemeResourceKeyType.ForegroundBrush)); } }

        private static ThemeResourceKey _RADdefinitionidentifierColorKey;
        private static ThemeResourceKey _RADdefinitionidentifierBrushKey;
        private static ThemeResourceKey _RADdefinitionidentifierTextColorKey;
        private static ThemeResourceKey _RADdefinitionidentifierTextBrushKey;
        public static ThemeResourceKey RADdefinitionidentifierColorKey { get { return _RADdefinitionidentifierColorKey ?? (_RADdefinitionidentifierColorKey = new ThemeResourceKey(Category, "RAD definition identifier", ThemeResourceKeyType.BackgroundColor)); } }
        public static ThemeResourceKey RADdefinitionidentifierBrushKey { get { return _RADdefinitionidentifierBrushKey ?? (_RADdefinitionidentifierBrushKey = new ThemeResourceKey(Category, "RAD definition identifier", ThemeResourceKeyType.BackgroundBrush)); } }
        public static ThemeResourceKey RADdefinitionidentifierTextColorKey { get { return _RADdefinitionidentifierTextColorKey ?? (_RADdefinitionidentifierTextColorKey = new ThemeResourceKey(Category, "RAD definition identifier", ThemeResourceKeyType.ForegroundColor)); } }
        public static ThemeResourceKey RADdefinitionidentifierTextBrushKey { get { return _RADdefinitionidentifierTextBrushKey ?? (_RADdefinitionidentifierTextBrushKey = new ThemeResourceKey(Category, "RAD definition identifier", ThemeResourceKeyType.ForegroundBrush)); } }

        private static ThemeResourceKey _RADreferenceidentifierColorKey;
        private static ThemeResourceKey _RADreferenceidentifierBrushKey;
        private static ThemeResourceKey _RADreferenceidentifierTextColorKey;
        private static ThemeResourceKey _RADreferenceidentifierTextBrushKey;
        public static ThemeResourceKey RADreferenceidentifierColorKey { get { return _RADreferenceidentifierColorKey ?? (_RADreferenceidentifierColorKey = new ThemeResourceKey(Category, "RAD reference identifier", ThemeResourceKeyType.BackgroundColor)); } }
        public static ThemeResourceKey RADreferenceidentifierBrushKey { get { return _RADreferenceidentifierBrushKey ?? (_RADreferenceidentifierBrushKey = new ThemeResourceKey(Category, "RAD reference identifier", ThemeResourceKeyType.BackgroundBrush)); } }
        public static ThemeResourceKey RADreferenceidentifierTextColorKey { get { return _RADreferenceidentifierTextColorKey ?? (_RADreferenceidentifierTextColorKey = new ThemeResourceKey(Category, "RAD reference identifier", ThemeResourceKeyType.ForegroundColor)); } }
        public static ThemeResourceKey RADreferenceidentifierTextBrushKey { get { return _RADreferenceidentifierTextBrushKey ?? (_RADreferenceidentifierTextBrushKey = new ThemeResourceKey(Category, "RAD reference identifier", ThemeResourceKeyType.ForegroundBrush)); } }

        private static ThemeResourceKey _radeonAsmArgumentsTextColorKey;
        private static ThemeResourceKey _radeonAsmArgumentsTextBrushKey;
        public static ThemeResourceKey radeonAsmArgumentsTextColorKey { get { return _radeonAsmArgumentsTextColorKey ?? (_radeonAsmArgumentsTextColorKey = new ThemeResourceKey(Category, "radeonAsmArguments", ThemeResourceKeyType.ForegroundColor)); } }
        public static ThemeResourceKey radeonAsmArgumentsTextBrushKey { get { return _radeonAsmArgumentsTextBrushKey ?? (_radeonAsmArgumentsTextBrushKey = new ThemeResourceKey(Category, "radeonAsmArguments", ThemeResourceKeyType.ForegroundBrush)); } }

        private static ThemeResourceKey _radeonAsmFunctionsTextColorKey;
        private static ThemeResourceKey _radeonAsmFunctionsTextBrushKey;
        public static ThemeResourceKey radeonAsmFunctionsTextColorKey { get { return _radeonAsmFunctionsTextColorKey ?? (_radeonAsmFunctionsTextColorKey = new ThemeResourceKey(Category, "radeonAsmFunctions", ThemeResourceKeyType.ForegroundColor)); } }
        public static ThemeResourceKey radeonAsmFunctionsTextBrushKey { get { return _radeonAsmFunctionsTextBrushKey ?? (_radeonAsmFunctionsTextBrushKey = new ThemeResourceKey(Category, "radeonAsmFunctions", ThemeResourceKeyType.ForegroundBrush)); } }

        private static ThemeResourceKey _radeonAsmInstructionsTextColorKey;
        private static ThemeResourceKey _radeonAsmInstructionsTextBrushKey;
        public static ThemeResourceKey radeonAsmInstructionsTextColorKey { get { return _radeonAsmInstructionsTextColorKey ?? (_radeonAsmInstructionsTextColorKey = new ThemeResourceKey(Category, "radeonAsmInstructions", ThemeResourceKeyType.ForegroundColor)); } }
        public static ThemeResourceKey radeonAsmInstructionsTextBrushKey { get { return _radeonAsmInstructionsTextBrushKey ?? (_radeonAsmInstructionsTextBrushKey = new ThemeResourceKey(Category, "radeonAsmInstructions", ThemeResourceKeyType.ForegroundBrush)); } }

        private static ThemeResourceKey _radeonAsmLabelsTextColorKey;
        private static ThemeResourceKey _radeonAsmLabelsTextBrushKey;
        public static ThemeResourceKey radeonAsmLabelsTextColorKey { get { return _radeonAsmLabelsTextColorKey ?? (_radeonAsmLabelsTextColorKey = new ThemeResourceKey(Category, "radeonAsmLabels", ThemeResourceKeyType.ForegroundColor)); } }
        public static ThemeResourceKey radeonAsmLabelsTextBrushKey { get { return _radeonAsmLabelsTextBrushKey ?? (_radeonAsmLabelsTextBrushKey = new ThemeResourceKey(Category, "radeonAsmLabels", ThemeResourceKeyType.ForegroundBrush)); } }
        #endregion

        #region colors
        public static readonly Dictionary<string, ThemeColor> Colors = new Dictionary<string, ThemeColor>
        {
            { PredefinedClassificationTypeNames.Instructions, new ThemeColor(radeonAsmInstructionsTextColorKey) },
            { PredefinedClassificationTypeNames.Arguments,  new ThemeColor(radeonAsmArgumentsTextColorKey) },
            { PredefinedClassificationTypeNames.Functions,  new ThemeColor(radeonAsmFunctionsTextColorKey) },
            { PredefinedClassificationTypeNames.Labels,  new ThemeColor(radeonAsmLabelsTextColorKey) },
            { PredefinedMarkerFormatNames.ReferenceIdentifier,  new ThemeColor(RADreferenceidentifierTextColorKey, RADreferenceidentifierColorKey) },
            { PredefinedMarkerFormatNames.DefinitionIdentifier,  new ThemeColor(RADdefinitionidentifierTextColorKey, RADdefinitionidentifierColorKey) },
            { PredefinedMarkerFormatNames.BraceMatching,  new ThemeColor(RADbracematchingTextColorKey, RADbracematchingColorKey) },
        };

        public static readonly Dictionary<string, ThemeColor> EditorColors = new Dictionary<string, ThemeColor>
        {
            { PredefinedMarkerFormatNames.ReferenceIdentifier,  new ThemeColor(RADreferenceidentifierTextColorKey, RADreferenceidentifierColorKey) },
            { PredefinedMarkerFormatNames.DefinitionIdentifier,  new ThemeColor(RADdefinitionidentifierTextColorKey, RADdefinitionidentifierColorKey) },
            { PredefinedMarkerFormatNames.BraceMatching,  new ThemeColor(RADbracematchingTextColorKey, RADbracematchingColorKey) },
        };
        #endregion
    }

    public class ThemeColor
    {
        private readonly ThemeResourceKey _foregroundResourceKey;
        private readonly ThemeResourceKey _backgroundResourceKey;
        public Color? Foreground { get { return GetColorFromResourceKey(_foregroundResourceKey); } }
        public Color? Background { get { return GetColorFromResourceKey(_backgroundResourceKey); } }

        public static ThemeColor Default { get { return new ThemeColor(null, null); } }

        public ThemeColor(ThemeResourceKey foreground = null, ThemeResourceKey background = null)
        {
            _foregroundResourceKey = foreground;
            _backgroundResourceKey = background;
        }

        private static Color? GetColorFromResourceKey(ThemeResourceKey resourceKey)
        {
            if (resourceKey == null)
                return null;

            var color = VSColorTheme.GetThemedColor(resourceKey);
            return Color.FromArgb(color.A, color.R, color.G, color.B);
        }
    }
}
